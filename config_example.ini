debug = true

# Suzu の HTTP リクエストで HTTPS を利用するかどうか
https = false
# Suzu の HTTP リクエストの待ち受けアドレスとポートです
listen_addr = 0.0.0.0
listen_port = 48080

exporter_https = false
# Suzu の Prometheus の待ち受けアドレスとポートです
exporter_listen_addr = 0.0.0.0
exporter_listen_port = 48081

# クライアントから受信する音声データにヘッダーが含まれている想定かどうかです
audio_streaming_header = false

# Suzu のサーバ証明書ファイルです
# tls_fullchain_file =
# Suzu の秘密鍵ファイルです
# tls_privkey_file =
# クライアント認証用の CA 証明書ファイルです
# tls_verify_cacert_path =

# [log]
# ログの出力先ディレクトリです
log_dir = .
# ログの出力先ファイルのファイル名です
log_name = suzu.jsonl
# ログの出力を標準出力にするかどうかです
# true にした場合、ファイルに出力せず、stdout にのみ出力します
log_stdout = false

# ローテーションするログの最大サイズ（MB）です
# log_rotate_max_size = 200
# 保持するログファイルの最大数です
# log_rotate_max_backups = 7
# 古いログファイルを保持する最大日数です
# log_rotate_max_age = 30
# ローテーションするログの圧縮を有効にするかどうかです
# log_rotate_compress = false

# ログのメッセージキー名を指定します
# デフォルトは message です
# log_message_key_name = message

# ログのタイムスタンプキー名を指定します
# デフォルトは time です
# log_timestamp_key_name = time

# デバッグ用のコンソールログを出力します
# この設定を利用するには debug を true にする必要があります
# この設定を有効にすると通常のログは出力されなくなります
# debug_console_log = false
# デバッグ用のコンソールログを JSON Lines 形式で出力します
# debug_console_log_json = false

skip_basic_auth = true

# 音声データのサンプリングレートです
audio_sample_rate = 48000
# 音声データのチャネル数です
audio_channel_count = 1

# クライアントから音声データが送信されてこない場合に、サーバに無音の音声データを送信するかどうかです
# true に設定した場合は、クライアントから音声データが送信されてこない場合に、サーバに無音の音声データを送信しません
disable_silent_packet = false

# 受信した音声データの保存先ファイルです
dump_file = ./dump.jsonl

# サーバからの切断時またはハンドラー個別で指定した条件でのリトライ回数を指定します
max_retry = 0
# リトライ間隔（ミリ秒）です
retry_interval_ms = 100
# サービスからのエラー受信時にリトライ対象とするエラーメッセージをカンマ区切りで指定します
# retry_targets = "BadRequestException,OutOfRange"

# aws の場合は IsPartial が false, gcp の場合は IsFinal が true の場合の最終的な結果のみを返す指定
final_result_only = true

# 受信した音声データを Ogg ファイルで保存するかどうかです
enable_ogg_file_output = false
# Ogg ファイルの保存先ディレクトリです
ogg_dir = "."

# 採用する結果の信頼スコアの最小値です（aws 指定時のみ有効）
# minimum_confidence_score が 0.0 の場合は信頼スコアによるフィルタリングは無効です
# minimum_confidence_score = 0.0

# 採用する結果の最小発話期間（秒）です（aws 指定時のみ有効）
# minimum_transcribed_time が 0.0 の場合は発話期間によるフィルタリングは無効です
# minimum_transcribed_time = 0.0

# minimum_confidence_score と minimum_transcribed_time の両方が無効の場合はフィルタリングしません

# [aws]
aws_region = ap-northeast-1
# Partial-result stabilization の有効化です
aws_enable_partial_results_stabilization = false
# 安定化レベルの指定です（high, medium, low）
# aws_partial_results_stability = low
# マルチチャネルの音声のチャネル識別の有効化です
aws_enable_channel_identification = false
# 認証情報ファイルの指定です
aws_credential_file = ./credentials
# プロファイルの指定です
# 認証情報に AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY を使用する場合は、下記のプロファイルの指定行をコメントアウトします
aws_profile = default

# クライアントに送る変換結果の情報に付与する項目
# 結果に関連付いているオーディオのチャネルです
aws_result_channel_id = true
# セグメントが完了していないかどうかです
# aws_result_is_partial = true
# 結果の識別子です
# aws_result_id = true

# https://cloud.google.com/speech-to-text/docs/reference/rpc/google.cloud.speech.v1#streamingrecognitionconfig
# https://cloud.google.com/speech-to-text/docs/reference/rpc/google.cloud.speech.v1#recognitionconfig
# [gcp]
# 1 つだけの発話を検出するかの設定です。ture にした場合は 1 つの発話を検出すると、それ以降の発話をテキスト化した結果は返ってきません
gcp_single_utterance = false
# テキスト化の中間結果を返すかの設定です
gcp_interim_results = true
# GCP の認証情報ファイル（JSON）の指定です。GOOGLE_APPLICATION_CREDENTIALS で認証情報ファイルを指定する場合は下記のファイルの指定行をコメントアウトします
gcp_credential_file = ""
# gcp_enable_separate_recognition_per_channel = false
# gcp_alternative_language_codes = []
# gcp_max_alternatives = 1
# gcp_profanity_filter = false
# gcp_enable_word_time_offsets = false
# gcp_enable_word_confidence = false
# gcp_enable_automatic_punctuation = false
# gcp_enable_spoken_punctuation = false
# gcp_model = default
# gcp_use_enhanced = false
# クライアントに送る変換結果の情報に付与する項目
# gcp_result_is_final = true
# gcp_result_stability = true
